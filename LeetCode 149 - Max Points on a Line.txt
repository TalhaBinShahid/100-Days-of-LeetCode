class Solution {
public:
    int maxPoints(vector<vector<int>>& points) {
        int n = points.size();
        if (n <= 2) return n;

        int maxPoints = 0;

        for (int i = 0; i < n; i++) {
            unordered_map<string, int> slopeCount;
            int duplicates = 1;

            for (int j = i + 1; j < n; j++) {
                int dx = points[j][0] - points[i][0];
                int dy = points[j][1] - points[i][1];

                if (dx == 0 && dy == 0) {
                    duplicates++;
                } else {
                    int gcd = __gcd(dx, dy);
                    dx /= gcd;
                    dy /= gcd;

                    string slope = to_string(dx) + "/" + to_string(dy);
                    slopeCount[slope]++;
                }
            }

            int currentMax = 0;
            for (auto& [slope, count] : slopeCount) {
                currentMax = max(currentMax, count);
            }

            maxPoints = max(maxPoints, currentMax + duplicates);
        }

        return maxPoints;
    }
};