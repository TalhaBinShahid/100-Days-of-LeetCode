class Solution {
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        unordered_map<int, int> inorderIndexMap;
        for (int i = 0; i < inorder.size(); i++) {
            inorderIndexMap[inorder[i]] = i;
        }
        int preorderIndex = 0;
        return buildTree(preorder, inorder, inorderIndexMap, preorderIndex, 0, inorder.size() - 1);
    }
    
    TreeNode* buildTree(const vector<int>& preorder, const vector<int>& inorder, unordered_map<int, int>& inorderIndexMap, int& preorderIndex, int inorderLeft, int inorderRight) {
        if (inorderLeft > inorderRight) return nullptr;
        int rootValue = preorder[preorderIndex++];
        TreeNode* root = new TreeNode(rootValue);
        int inorderIndex = inorderIndexMap[rootValue];
        root->left = buildTree(preorder, inorder, inorderIndexMap, preorderIndex, inorderLeft, inorderIndex - 1);
        root->right = buildTree(preorder, inorder, inorderIndexMap, preorderIndex, inorderIndex + 1, inorderRight);
        return root;
    }
};