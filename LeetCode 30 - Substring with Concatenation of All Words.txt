class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        vector<int> result;
        if (s.empty() || words.empty()) return result;

        int wordLength = words[0].size();
        int wordCount = words.size();
        int totalLength = wordLength * wordCount;

        if (s.length() < totalLength) 
        return result;

        unordered_map<string, int> wordFreq;
        for (const string& word : words) {
            wordFreq[word]++;
        }

        for (int i = 0; i < wordLength; ++i) { 
            int left = i;
            int count = 0;
            unordered_map<string, int> seen;

            for (int j = i; j <= s.length() - wordLength; j += wordLength) {
                string word = s.substr(j, wordLength);
                
                if (wordFreq.find(word) != wordFreq.end()) {
                    seen[word]++;
                    count++;

                    while (seen[word] > wordFreq[word]) { 
                        string leftWord = s.substr(left, wordLength);
                        seen[leftWord]--;
                        count--;
                        left += wordLength;
                    }

                    if (count == wordCount) {
                        result.push_back(left);
                    }
                } else {
                    seen.clear();
                    count = 0;
                    left = j + wordLength; 
                }
            }
        }

        return result;
    }
};