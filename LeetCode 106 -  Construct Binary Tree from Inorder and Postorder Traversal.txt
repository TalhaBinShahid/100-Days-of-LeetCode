class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        int postIdx = postorder.size() - 1;
    std::unordered_map<int, int> inMap;
    for (int i = 0; i < inorder.size(); i++) {
        inMap[inorder[i]] = i;
    }
    return buildTreeHelper(inorder, postorder, postIdx, 0, inorder.size() - 1, inMap);
    }
    TreeNode* buildTreeHelper(std::vector<int>& inorder, std::vector<int>& postorder, int& postIdx, int inStart, int inEnd, std::unordered_map<int, int>& inMap) {
    if (inStart > inEnd) return nullptr;

    int rootVal = postorder[postIdx--];
    TreeNode* root = new TreeNode(rootVal);
    int inIndex = inMap[rootVal];

    root->right = buildTreeHelper(inorder, postorder, postIdx, inIndex + 1, inEnd, inMap);
    root->left = buildTreeHelper(inorder, postorder, postIdx, inStart, inIndex - 1, inMap);

    return root;
}
};